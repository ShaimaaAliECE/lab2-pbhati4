{"version":3,"sources":["index.js"],"names":["Grid","props","state","squares","Array","fill","xIsNext","i","Square","value","this","onClick","handleClick","slice","determineWinner","setState","status","winner","className","renderSquare","React","Component","Game","bgColour","style","backgroundColor","lines","length","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b38d8dd1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Grid extends React.Component { //represents the connect-4 grid\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          squares: Array(42).fill(null),\n          xIsNext: true,\n        };\n      }\n\n\n    renderSquare(i) { //method used to set the value of the square as well as trigger handleClick\n        return <Square value={this.state.squares[i]}  onClick={() => this.handleClick(i)}/>\n    }\n\n    handleClick(i) { //method used to set the state of the square as well as establish the next player's turn\n        const squares = this.state.squares.slice();\n        if (determineWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'Yellow' : 'Red';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n      }\n\n    render() { //render method\n\n        const winner = determineWinner(this.state.squares); //check if a winner is found\n        let status;\n        if (winner) {\n          status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'Yellow' : 'Red');\n        }\n\n        return( //render the 6 x 7 grid\n            <div>\n                <div className=\"status\">{status}</div>\n                <div className=\"grid-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                    {this.renderSquare(6)}\n                </div>\n                <div className=\"grid-row\">\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                    {this.renderSquare(9)}\n                    {this.renderSquare(10)}\n                    {this.renderSquare(11)}\n                    {this.renderSquare(12)}\n                    {this.renderSquare(13)}\n                </div>\n                <div className=\"grid-row\">\n                    {this.renderSquare(14)}\n                    {this.renderSquare(15)}\n                    {this.renderSquare(16)}\n                    {this.renderSquare(17)}\n                    {this.renderSquare(18)}\n                    {this.renderSquare(19)}\n                    {this.renderSquare(20)}\n                </div>\n                <div className=\"grid-row\">\n                    {this.renderSquare(21)}\n                    {this.renderSquare(22)}\n                    {this.renderSquare(23)}\n                    {this.renderSquare(24)}\n                    {this.renderSquare(25)}\n                    {this.renderSquare(26)}\n                    {this.renderSquare(27)}\n                </div>\n                <div className=\"grid-row\">\n                    {this.renderSquare(28)}\n                    {this.renderSquare(29)}\n                    {this.renderSquare(30)}\n                    {this.renderSquare(31)}\n                    {this.renderSquare(32)}\n                    {this.renderSquare(33)}\n                    {this.renderSquare(34)}\n                </div>\n                <div className=\"grid-row\">\n                    {this.renderSquare(35)}\n                    {this.renderSquare(36)}\n                    {this.renderSquare(37)}\n                    {this.renderSquare(38)}\n                    {this.renderSquare(39)}\n                    {this.renderSquare(40)}\n                    {this.renderSquare(41)}\n                </div>\n\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component { //represents the concept of a game\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Grid />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/*toDO*/}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction Square(props) { //function component representing a square \n    var bgColour;\n    if (props.value == \"Yellow\") {\n            bgColour = 'yellow'\n\n    } else if (props.value == \"Red\"){\n        bgColour = 'red'\n    } else {\n        bgColour = 'gray'\n    }\n    return (\n        <button className=\"square\" onClick={props.onClick} style={{backgroundColor:bgColour}}>\n            &nbsp;&nbsp;  \n        </button>\n    );\n}\n\nfunction determineWinner(squares){ //function used to determine if a winner is found with all of the winning combinations\n    const lines = [\n        [0, 1, 2, 3],\n        [1, 2, 3, 4],\n        [2, 3, 4, 5],\n        [3, 4, 5, 6],\n        [7, 8, 9, 10],\n        [8, 9, 10, 11],\n        [9, 10, 11, 12],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17],\n        [15, 16, 17, 18],\n        [16, 17, 18, 19],\n        [17, 18, 19, 20],\n        [21, 22, 23, 24],\n        [22, 23, 24, 25],\n        [23, 24, 25, 26],\n        [24, 25, 26, 27],\n        [28, 29, 30, 31],\n        [29, 30, 31, 32],\n        [30, 31, 32, 33],\n        [31, 32, 33, 34],\n        [35, 36, 37, 38],\n        [36, 37, 38, 39],\n        [37, 38, 39, 40],\n        [38, 39, 40, 41],\n        [0, 7, 14, 21],\n        [1, 8, 15, 22],\n        [2, 9, 16, 23],\n        [3, 10, 17, 24],\n        [4, 11, 18, 25],\n        [5, 12, 19, 26],\n        [6, 13, 20, 27],\n        [7, 14, 21, 28],\n        [8, 15, 22, 29],\n        [9, 16, 23, 30],\n        [10, 17, 24, 31],\n        [11, 18, 25, 32],\n        [12, 19, 26, 33],\n        [13, 20, 27, 34],\n        [14, 21, 28, 35],\n        [15, 22, 29, 36],\n        [16, 23, 30, 37],\n        [17, 24, 31, 38],\n        [18, 25, 32, 39],\n        [19, 26, 33, 40],\n        [20, 27, 34, 41],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c, d] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d]) { //finding four in a row of all of the possible combinations\n          return squares[a];\n        }\n      }\n      return null;\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}